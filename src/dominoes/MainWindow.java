/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dominoes;

import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JLabel;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wjpas
 */
public class MainWindow extends javax.swing.JFrame {
    
    private ArrayList<Player> playerList;
    private Stack<Domino> boneyard;
    private boolean team;
    private int turnIndex;
    private DominoTrack track;
    private Domino selectedDom;
    private File currentFile;
    
    
    public MainWindow() {
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog_gamePlay = new javax.swing.JDialog();
        panel_gamePlay = new javax.swing.JPanel();
        panel_dominoTrack = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_score = new javax.swing.JTable();
        label_instructionLabel = new javax.swing.JLabel();
        label_player = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        MenuBar_file = new javax.swing.JMenu();
        menuItem_save = new javax.swing.JMenuItem();
        menuItem_saveAs = new javax.swing.JMenuItem();
        panel_mainMenu = new javax.swing.JPanel();
        label_drawDominoes = new javax.swing.JLabel();
        button_newGame = new javax.swing.JButton();
        comboBox_players = new javax.swing.JComboBox<>();
        button_openGame = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        dialog_gamePlay.setMinimumSize(new java.awt.Dimension(1845, 954));
        dialog_gamePlay.setPreferredSize(new java.awt.Dimension(1845, 954));
        dialog_gamePlay.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                dialog_gamePlayComponentHidden(evt);
            }
        });

        panel_gamePlay.setBackground(new java.awt.Color(153, 153, 255));
        panel_gamePlay.setMaximumSize(new java.awt.Dimension(1825, 904));
        panel_gamePlay.setMinimumSize(new java.awt.Dimension(1825, 904));
        panel_gamePlay.setPreferredSize(new java.awt.Dimension(1825, 904));
        panel_gamePlay.setLayout(null);

        panel_dominoTrack.setBackground(new java.awt.Color(153, 153, 255));
        panel_dominoTrack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel_dominoTrack.setLayout(null);
        panel_gamePlay.add(panel_dominoTrack);
        panel_dominoTrack.setBounds(30, 50, 1590, 690);

        table_score.setAutoCreateRowSorter(true);
        table_score.setBackground(new java.awt.Color(153, 153, 255));
        table_score.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        table_score.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        table_score.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_score.setGridColor(new java.awt.Color(0, 0, 0));
        table_score.setMaximumSize(new java.awt.Dimension(300, 659));
        table_score.setMinimumSize(new java.awt.Dimension(300, 659));
        table_score.setOpaque(false);
        table_score.setPreferredSize(new java.awt.Dimension(300, 659));
        table_score.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(table_score);

        panel_gamePlay.add(jScrollPane1);
        jScrollPane1.setBounds(1640, 50, 170, 690);
        jScrollPane1.getAccessibleContext().setAccessibleName("");

        label_instructionLabel.setText("Instruction label");
        panel_gamePlay.add(label_instructionLabel);
        label_instructionLabel.setBounds(30, 20, 1580, 16);

        label_player.setText("Player 1:");
        panel_gamePlay.add(label_player);
        label_player.setBounds(50, 800, 60, 20);

        MenuBar_file.setText("File");

        menuItem_save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_save.setText("Save");
        menuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveActionPerformed(evt);
            }
        });
        MenuBar_file.add(menuItem_save);

        menuItem_saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItem_saveAs.setText("Save As");
        menuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveAsActionPerformed(evt);
            }
        });
        MenuBar_file.add(menuItem_saveAs);

        jMenuBar2.add(MenuBar_file);

        dialog_gamePlay.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout dialog_gamePlayLayout = new javax.swing.GroupLayout(dialog_gamePlay.getContentPane());
        dialog_gamePlay.getContentPane().setLayout(dialog_gamePlayLayout);
        dialog_gamePlayLayout.setHorizontalGroup(
            dialog_gamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_gamePlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialog_gamePlayLayout.setVerticalGroup(
            dialog_gamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_gamePlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel_mainMenu.setBackground(new java.awt.Color(153, 153, 255));

        label_drawDominoes.setFont(new java.awt.Font("Algerian", 1, 36)); // NOI18N
        label_drawDominoes.setText("DRAW DOMINOeS");

        button_newGame.setText("New Game");
        button_newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_newGameActionPerformed(evt);
            }
        });

        comboBox_players.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        button_openGame.setText("Open Game");
        button_openGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_openGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_mainMenuLayout = new javax.swing.GroupLayout(panel_mainMenu);
        panel_mainMenu.setLayout(panel_mainMenuLayout);
        panel_mainMenuLayout.setHorizontalGroup(
            panel_mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_mainMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_newGame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBox_players, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panel_mainMenuLayout.createSequentialGroup()
                .addContainerGap(280, Short.MAX_VALUE)
                .addComponent(label_drawDominoes)
                .addContainerGap(257, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_mainMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_openGame)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_mainMenuLayout.setVerticalGroup(
            panel_mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_mainMenuLayout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addComponent(label_drawDominoes, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox_players, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_newGame))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_openGame)
                .addContainerGap(352, Short.MAX_VALUE))
        );

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_mainMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_mainMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_newGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_newGameActionPerformed
        if (comboBox_players.getSelectedIndex() != 0) {
            team = false;
            button_newGame.setVisible(false);
            for (int i = 1; i < panel_mainMenu.getComponentCount(); i++) {
                panel_mainMenu.getComponent(i).setVisible(false);
            }
            label_drawDominoes.setVisible(true);
            
            if (Integer.parseInt((String)comboBox_players.getSelectedItem()) != 4) {
                openSelectPlayerWindow();
            } else {
                //Show message to select teams or individual
                ImageIcon icon = new ImageIcon();
                String[] options = {"Teams", "Solo"};
                int i = JOptionPane.showOptionDialog(panel_mainMenu, "Would you like to play teams or of everyone for themselves?", "Teams", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, icon, options, null);
                if (i == 0) {
                    openTeamSelectWindow();
                    team = true;
                } else
                    openSelectPlayerWindow();
            }
            
        } else {
            JOptionPane.showMessageDialog(panel_mainMenu, "Please select the number of players", "ERROR: Player number not selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_button_newGameActionPerformed

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveActionPerformed
         System.out.println("SAVE");

        // Writes all data in the program to a DataModel and saves the model to 
        // the disk
        
        //if there is no saved file than go to save as method
        if (currentFile == null) {
            menuItem_saveAsActionPerformed(evt);
        }
        
        //if there is a current file, write data model to disk
        if (currentFile != null) {
            try {
                FileOutputStream fos = new FileOutputStream(currentFile);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                
                if (draw(playerList.get(turnIndex)))
                    panel_dominoTrack.remove(0);

                DataModel dm = new DataModel(playerList, boneyard, team, turnIndex, track, panel_dominoTrack);

                oos.writeObject(dm);

                fos.close();
                oos.close();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(dialog_gamePlay, ex.toString(), "ERROR: File Not Found", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(dialog_gamePlay, ex.toString(), "ERROR: Can't Write to Disk", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItem_saveActionPerformed

    private void menuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveAsActionPerformed
        // Calls a file chooser. User chooses a file and the file is assigned
        // <currentFile> instance variable. Then, calls the saveActionPerformed
        // method to actually save the file
        
        JFileChooser jfc = new JFileChooser();
        
        if (jfc.showSaveDialog(dialog_gamePlay) == JFileChooser.APPROVE_OPTION) {
            
            currentFile = jfc.getSelectedFile();
            menuItem_saveActionPerformed(evt);
        }
    }//GEN-LAST:event_menuItem_saveAsActionPerformed

    private void button_openGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_openGameActionPerformed
        // reads the saved data(DataModel) from disk and replaces program
        // instance with data from DataModel
        
        //Create new fie chooser
        JFileChooser jfc = new JFileChooser();
        
        //check if the file chosen is compatable
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jfc.getSelectedFile();
        } else {
            return;
        }
        
        //open file and set data to data in file
        try {
            FileInputStream fis = new FileInputStream(currentFile);
            ObjectInputStream ois = new ObjectInputStream(fis);
            
            DataModel dm = (DataModel) ois.readObject();
            
            playerList        = dm.getPlayerList();
            boneyard         = dm.getBoneyard();
            turnIndex = dm.getTurnIndex();
            track = dm.getTrack();
            team = dm.isTeam();
            JPanel p = dm.getTrackPanel();
            
            for (Component c : p.getComponents()) {
                panel_dominoTrack.add(c);
            }
            System.out.println();
            
            fis.close();
            ois.close();
            
            openGame();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: File Not Found", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: Can't Write to Disk", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: Wrong File Typr", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_button_openGameActionPerformed

    private void dialog_gamePlayComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_dialog_gamePlayComponentHidden
        //Clear Panel
        for (Component c : panel_gamePlay.getComponents()) {
            if (c.getName() != null)
                panel_gamePlay.remove(c);
        }
        
        for (Component c : panel_dominoTrack.getComponents()) {
            panel_dominoTrack.remove(c);
        }
        
        //fix main menu
        for (Component c : panel_mainMenu.getComponents()) {
            c.setEnabled(true);
        }
    }//GEN-LAST:event_dialog_gamePlayComponentHidden

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuBar_file;
    private javax.swing.JButton button_newGame;
    private javax.swing.JButton button_openGame;
    private javax.swing.JComboBox<String> comboBox_players;
    private javax.swing.JDialog dialog_gamePlay;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_drawDominoes;
    private javax.swing.JLabel label_instructionLabel;
    private javax.swing.JLabel label_player;
    private javax.swing.JMenuItem menuItem_save;
    private javax.swing.JMenuItem menuItem_saveAs;
    private javax.swing.JPanel panel_dominoTrack;
    private javax.swing.JPanel panel_gamePlay;
    private javax.swing.JPanel panel_mainMenu;
    private javax.swing.JTable table_score;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        System.out.println("LOAD DATA");
        playerList = new ArrayList();
        boneyard = new Stack();
        team = false;
        turnIndex = 0;
        track = new DominoTrack();
        selectedDom = new Domino();
        
        /////////load numbers in combo box///////////

        comboBox_players.removeAllItems();
        comboBox_players.addItem("Players");
        for (int i = 2; i <= 4; i++) {
            comboBox_players.addItem("" + i);
        }
        
        
    }
    
    private void openSelectPlayerWindow() {
        ///add dominoes to boneyard////
        boneyard.clear();
        ArrayList<Domino> list = new ArrayList();
        for (int i = 0; i < 7; i++) {
            for (int j = i; j < 7; j++) {
                String name = i + ":" + j;
                list.add(new Domino(name));
            }
        }
        Collections.shuffle(list);
        
        for (Domino domino : list)
            boneyard.add(domino);


        //create instruction prompt
        JLabel label = new JLabel("Select Player or Computer:");
        label.setBounds(label_drawDominoes.getX(), label_drawDominoes.getY() + label_drawDominoes.getHeight() + 15, 300, 20);
        panel_mainMenu.add(label);
        panel_mainMenu.setComponentZOrder(label, 0);
        panel_mainMenu.repaint();
        
        //add players to player list
        playerList.clear();
        for (int i = 0; i < (comboBox_players.getSelectedIndex() + 1); i++) {
            playerList.add(new Player());
        }
        
        //create player labels
        
        int y = label.getY() + label.getHeight();
        ArrayList<JLabel> labelList = new ArrayList(); 
        for (int i = 0; i < (comboBox_players.getSelectedIndex() + 1); i++) {
            int x = label.getX();

            //create Player label
            JLabel playerLabel = new JLabel("Player " + (i + 1) + " :");
            playerLabel.setBounds(x, y, 60, 20);
            panel_mainMenu.add(playerLabel);
            panel_mainMenu.setComponentZOrder(playerLabel, 0);
            
            //increment x
            x += playerLabel.getWidth();
            
            
            //create left arrow label
            JLabel lArrowLabel = new JLabel();
            lArrowLabel.setBounds(x, y, 50, 30);
            ImageIcon icon = new ImageIcon("larrow.png");
            Image img = icon.getImage();
            img = img.getScaledInstance(lArrowLabel.getWidth(), lArrowLabel.getHeight(), Image.SCALE_SMOOTH);
            icon = new ImageIcon(img);
            lArrowLabel.setIcon(icon);
            panel_mainMenu.add(lArrowLabel);
            panel_mainMenu.setComponentZOrder(lArrowLabel, 0);
            
            //increment x
            x += lArrowLabel.getWidth() + 10;
            
            //create player or computer label
            JLabel pOrCLabel = new JLabel("Player");
            pOrCLabel.setBounds(x, y, 60, 20);
            panel_mainMenu.add(pOrCLabel);
            panel_mainMenu.setComponentZOrder(pOrCLabel, 0);
            labelList.add(pOrCLabel);
            
            //increment x
            x += pOrCLabel.getWidth();
            
            //create right arrow label
            JLabel rArrowLabel = new JLabel();
            rArrowLabel.setBounds(x, y, 50, 30);
            icon = new ImageIcon("rarrow.png");
            img = icon.getImage();
            img = img.getScaledInstance(rArrowLabel.getWidth(), rArrowLabel.getHeight(), Image.SCALE_SMOOTH);
            icon = new ImageIcon(img);
            rArrowLabel.setIcon(icon);
            panel_mainMenu.add(rArrowLabel);
            panel_mainMenu.setComponentZOrder(rArrowLabel, 0);

            //add Mouse Listener
            MouseListener listener = new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    int sourceY = ((JLabel)e.getSource()).getY();
                    for (JLabel label : labelList) {
                        if (label.getY() == sourceY) {
                            if (label.getText().equals("Player")) {
                                label.setText("Computer");
                                //find the corresponding player
                                for (Component c : panel_mainMenu.getComponents()) {
                                    if (c.getY() == label.getY()) {
                                        JLabel playerL = (JLabel)c;
                                        if (playerL.getText() != null && playerL.getText().contains(":")) {
                                            String name = playerL.getText();
                                            int index = Integer.parseInt(name.substring(name.indexOf(":") - 2, name.indexOf(":") - 1)) - 1;
                                            playerList.get(index).setComputer(true);
                                        }
                                    }
                                }
                            } else {
                                label.setText("Player");
                                //find the corresponding player
                                for (Component c : panel_mainMenu.getComponents()) {
                                    if (c.getY() == label.getY()) {
                                        JLabel playerL = (JLabel)c;
                                        if (playerL.getText() != null && playerL.getText().contains(":")) {
                                            String name = playerL.getText();
                                            int index = Integer.parseInt(name.substring(name.indexOf(":") - 2, name.indexOf(":") - 1)) - 1;
                                            playerList.get(index).setComputer(false);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                @Override
                public void mousePressed(MouseEvent e) {}

                @Override
                public void mouseReleased(MouseEvent e) {}

                @Override
                public void mouseEntered(MouseEvent e) {}

                @Override
                public void mouseExited(MouseEvent e) {}
            };
            
            //add listener to arrow label
            lArrowLabel.addMouseListener(listener);
            rArrowLabel.addMouseListener(listener);
            
            y += 40;
            
            panel_mainMenu.repaint();
        }
        
        //add start game button
        JButton startGameButton = new JButton("Start Game");
        startGameButton.setBounds(label.getX() + 70, y, 100, 20);
        panel_mainMenu.add(startGameButton);
        panel_mainMenu.setComponentZOrder(startGameButton, 0);
        panel_mainMenu.repaint();
        
        //create ActionListener
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                startGame();
            }
        };
        
        startGameButton.addActionListener(l);
    }
    
    private void openTeamSelectWindow() {
        ///add dominoes to boneyard////
        boneyard.clear();
        ArrayList<Domino> list = new ArrayList();
        for (int i = 0; i < 7; i++) {
            for (int j = i; j < 7; j++) {
                String name = i + ":" + j;
                list.add(new Domino(name));
            }
        }
        Collections.shuffle(list);
        
        for (Domino domino : list)
            boneyard.add(domino);
        
        //create instruction prompt
        JLabel label = new JLabel("Select Player or Computer and team:");
        label.setBounds(label_drawDominoes.getX(), label_drawDominoes.getY() + label_drawDominoes.getHeight() + 15, 300, 20);
        panel_mainMenu.add(label);
        panel_mainMenu.setComponentZOrder(label, 0);
        panel_mainMenu.repaint();
        
        //////////////////////change when done testing end//////////////////
        //add players to player list
        playerList.clear();
        for (int i = 0; i < (comboBox_players.getSelectedIndex() + 1); i++) {
//            Player p = new Player();
//            p.setScore(99);
            playerList.add(new Player());
        }
        
        //create player labels
        
        int y = label.getY() + label.getHeight();
        ArrayList<JLabel> labelList = new ArrayList(); 
        for (int i = 0; i < (comboBox_players.getSelectedIndex() + 1); i++) {
            int x = label.getX();

            //create Player label
            JLabel playerLabel = new JLabel("Player " + (i + 1) + " :");
            playerLabel.setBounds(x, y, 60, 20);
            panel_mainMenu.add(playerLabel);
            panel_mainMenu.setComponentZOrder(playerLabel, 0);
            
            //increment x
            x += playerLabel.getWidth();
            
            
            //create left arrow label
            JLabel lArrowLabel = new JLabel();
            lArrowLabel.setBounds(x, y, 50, 30);
            ImageIcon icon = new ImageIcon("larrow.png");
            Image img = icon.getImage();
            img = img.getScaledInstance(lArrowLabel.getWidth(), lArrowLabel.getHeight(), Image.SCALE_SMOOTH);
            icon = new ImageIcon(img);
            lArrowLabel.setIcon(icon);
            panel_mainMenu.add(lArrowLabel);
            panel_mainMenu.setComponentZOrder(lArrowLabel, 0);
            
            //increment x
            x += lArrowLabel.getWidth() + 10;
            
            //create player or computer label
            JLabel pOrCLabel = new JLabel("Player");
            pOrCLabel.setBounds(x, y, 60, 20);
            panel_mainMenu.add(pOrCLabel);
            panel_mainMenu.setComponentZOrder(pOrCLabel, 0);
            labelList.add(pOrCLabel);
            
            //increment x
            x += pOrCLabel.getWidth();
            
            //create right arrow label
            JLabel rArrowLabel = new JLabel();
            rArrowLabel.setBounds(x, y, 50, 30);
            icon = new ImageIcon("rarrow.png");
            img = icon.getImage();
            img = img.getScaledInstance(rArrowLabel.getWidth(), rArrowLabel.getHeight(), Image.SCALE_SMOOTH);
            icon = new ImageIcon(img);
            rArrowLabel.setIcon(icon);
            panel_mainMenu.add(rArrowLabel);
            panel_mainMenu.setComponentZOrder(rArrowLabel, 0);
            
            //increment x
            x += pOrCLabel.getWidth();
            
            //Create team label
            JLabel label_team = new JLabel("Team:");
            label_team.setBounds(x, y, 50, 20);
            panel_mainMenu.add(label_team);
            panel_mainMenu.setComponentZOrder(label_team, 0);
            
            //increment x
            x += label_team.getWidth();
            
            //Create team dropdown menu
            JComboBox comboBox_team = new JComboBox();
            comboBox_team.setName("comboBox");
            comboBox_team.setBounds(x, y, 70, 20);
            comboBox_team.addItem("Team");
            comboBox_team.addItem(1);
            comboBox_team.addItem(2);
            panel_mainMenu.add(comboBox_team);
            panel_mainMenu.setComponentZOrder(comboBox_team, 0);
            
            //create Mouse Listener for arrows
            MouseListener listener = new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    int sourceY = ((JLabel)e.getSource()).getY();
                    for (JLabel label : labelList) {
                        if (label.getY() == sourceY) {
                            if (label.getText().equals("Player")) {
                                label.setText("Computer");
                                //find the corresponding player
                                for (Component c : panel_mainMenu.getComponents()) {
                                    if (c.isVisible() && c.getY() == label.getY() && c.getName() == null) {
                                        JLabel playerL = (JLabel)c;
                                        if (playerL.getText() != null && playerL.getText().contains("Player ")) {
                                            String name = playerL.getText();
                                            int index = Integer.parseInt(name.substring(name.indexOf(":") - 2, name.indexOf(":") - 1)) - 1;
                                            playerList.get(index).setComputer(true);
                                        }
                                    }
                                }
                            } else {
                                label.setText("Player");
                                //find the corresponding player
                                for (Component c : panel_mainMenu.getComponents()) {
                                    if (c.isVisible() && c.getY() == label.getY() && c.getName() == null) {
                                        JLabel playerL = (JLabel)c;
                                        if (playerL.getText() != null && playerL.getText().contains("Player ")) {
                                            String name = playerL.getText();
                                            int index = Integer.parseInt(name.substring(name.indexOf(":") - 2, name.indexOf(":") - 1)) - 1;
                                            playerList.get(index).setComputer(false);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                @Override
                public void mousePressed(MouseEvent e) {}

                @Override
                public void mouseReleased(MouseEvent e) {}

                @Override
                public void mouseEntered(MouseEvent e) {}

                @Override
                public void mouseExited(MouseEvent e) {}
            };
            
            //create action listener for comboBoxes
            ActionListener comboBoxSelected = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    //get player to set team
                    int sourceY = ((JComboBox)e.getSource()).getY();
                    for (Component c : panel_mainMenu.getComponents()) {
                        if (c.isVisible() && c.isVisible() && c.getY() == sourceY && c.getName() == null) {
                            JLabel playerL = (JLabel)c;
                            if (playerL.getText() != null && playerL.getText().contains("Player ")) {
                                String name = playerL.getText();
                                int index = Integer.parseInt(name.substring(name.indexOf(":") - 2, name.indexOf(":") - 1)) - 1;
                                if (comboBox_team.getSelectedIndex() != 0)
                                    playerList.get(index).setTeam(comboBox_team.getSelectedIndex());
                            }
                        }
                    }
                }
            };
            
            //add listener to arrow label
            lArrowLabel.addMouseListener(listener);
            rArrowLabel.addMouseListener(listener);
            comboBox_team.addActionListener(comboBoxSelected);
            
            y += 40;
            
            panel_mainMenu.repaint();
        }
        
        //add start game button
        JButton startGameButton = new JButton("Start Game");
        startGameButton.setName("startGameButton");
        startGameButton.setBounds(label.getX() + 70, y, 100, 20);
        panel_mainMenu.add(startGameButton);
        panel_mainMenu.setComponentZOrder(startGameButton, 0);
        panel_mainMenu.repaint();
        
        //create ActionListener
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (checkTeamBox(panel_mainMenu))
                    startGame();
                else
                    JOptionPane.showMessageDialog(panel_mainMenu, "ERROR: Must selct teams", "ERROR: Teams incorrect", JOptionPane.ERROR_MESSAGE);
            }
        };
        
        startGameButton.addActionListener(l);
    }
    
    private void startGame() {
        System.out.println("START GAME");
        //////////set mainMenu panel back to Main Menu/////////////////
        for (int i = 0; i < panel_mainMenu.getComponentCount() - 4; i++) {
            panel_mainMenu.getComponent(i).setVisible(false);
        }
        button_newGame.setVisible(true);
        button_openGame.setVisible(true);
        comboBox_players.setVisible(true);
        button_newGame.setEnabled(false);
        button_openGame.setEnabled(false);
        comboBox_players.setEnabled(false);
        
        //clear track
        track.clear();
        
        //clear panel_dominoTrack
        for (Component c : panel_dominoTrack.getComponents())
            panel_dominoTrack.remove(c);
        
        ////////open gamePlay Dialog///////////////////////
        dialog_gamePlay.setVisible(true);
        
        updateScoreTable();
        
        //add dominoes to hand
        for (Player player : playerList) {
            for (int i = 0; i < 7 - (playerList.size() - 2); i++)
                player.add(boneyard.pop());
        }
        
        //figure out who is going first
        //get highest double
        boolean hasDouble = false;
        Domino highestRankDom = new Domino();
        Player firstPlayer = playerList.get(0);
        for (Player player : playerList) {
            if (player.containsDouble())
                hasDouble = true;
        }
        if (hasDouble) {
            for (Player player : playerList) {
                if (player.containsDouble()) {
                    if (player.highestRank().getTotalValue() > highestRankDom.getTotalValue()) {
                        highestRankDom = player.highestRank();
                        firstPlayer = player;
                    }
                }
            }
        } else {
            for (Player player : playerList) {
                if (player.highestRank().getTotalValue() > highestRankDom.getTotalValue()) {
                    highestRankDom = player.highestRank();
                    firstPlayer = player;
                }
            }
        }
        
        turnIndex = playerList.indexOf(firstPlayer);
        
        MouseListener dominoClicked = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                dominoSelected(e);
                inverseDominoColor(e);
                
            }

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {}

            @Override
            public void mouseEntered(MouseEvent e) {}

            @Override
            public void mouseExited(MouseEvent e) {}
        };
        
        //////////place first domino in track///////
        playerList.get(turnIndex).remove(highestRankDom);
        if (highestRankDom.getSideOneValue().equals(highestRankDom.getSideTwoValue()))
                highestRankDom.setOpenSides("up down left right");
            else
                highestRankDom.setOpenSides("left right");
        track.add(highestRankDom);
        
        //create domino JLabel and add to panel_DominoTrack
        JLabel label = new JLabel();
        String name = highestRankDom.getSideOneValue() + ":" + highestRankDom.getSideTwoValue() + " root";
        label.setName(name);
        label.setBounds((panel_dominoTrack.getWidth() / 2) - 100, (panel_dominoTrack.getHeight() / 2) - 50, 200, 100);
        label.setIcon(resizeImageIcon(highestRankDom.getImageIcon(highestRankDom.toString(), "horizontal"), label));
        panel_dominoTrack.add(label);
        panel_dominoTrack.repaint();
        
        //update instruction label
        label_instructionLabel.setText("Player " + (turnIndex + 1) + " started this round with the " + highestRankDom.toString() + " Domino");
        
        //increment turnIndex
        if (turnIndex == playerList.size() - 1)
            turnIndex = 0;
        else
            turnIndex++;
        
        if (!playerList.get(turnIndex).isComputer()) {
            //update instruction label
            label_instructionLabel.setText(label_instructionLabel.getText() + ". Player " + (turnIndex + 1) + ": Please select the domino you would like to play, "
                    + "and then select the green box in which you would like to place the domino");

            label_player.setText("Player " + (turnIndex + 1) + ": ");

            //Display hand 1
            Player player1 = playerList.get(turnIndex);
            int x = label_player.getX() + label_player.getWidth() + 20;
            int y = label_player.getY() - 30;
            for (Domino domino : (ArrayList<Domino>) player1.getHand()) {
                name = domino.getSideOneValue() + ":" + domino.getSideTwoValue();
                JLabel dominoLabel = new JLabel();
                dominoLabel.setName(name);
                dominoLabel.setBounds(x, y, 100, 200);
                dominoLabel.setIcon(resizeImageIcon(domino.getImageIcon(name, "vertical"), dominoLabel));
                dominoLabel.addMouseListener(dominoClicked);
                panel_gamePlay.add(dominoLabel);
                panel_gamePlay.setComponentZOrder(dominoLabel, 0);
                x += 110;
            }

            panel_gamePlay.repaint();

            if (draw(playerList.get(turnIndex))) {
                if (!boneyard.isEmpty())
                    displayDraw();
                else {
                    System.out.println((turnIndex + 1) + " is out");
                    playerList.get(turnIndex).setOut(true);
                    nextTurn();
                }
            } 
        } else {
            //start computer turn
            startComputerTurn();
        }
    }
    
    private void openGame() {
        //////////set mainMenu panel back to Main Menu/////////////////
        for (int i = 0; i < panel_mainMenu.getComponentCount() - 4; i++) {
            panel_mainMenu.getComponent(i).setVisible(false);
        }
        button_newGame.setVisible(true);
        button_openGame.setVisible(true);
        comboBox_players.setVisible(true);
        button_newGame.setEnabled(false);
        button_openGame.setEnabled(false);
        comboBox_players.setEnabled(false);
        
        dialog_gamePlay.setVisible(true);

        //display Track
        updateHandDisplay();
        updateScoreTable();
        
        //check for draw
        if (draw(playerList.get(turnIndex))) {
            if (!boneyard.isEmpty()) {
                displayDraw();
                playerList.get(turnIndex).setOut(false);
            } else {
                System.out.println((turnIndex + 1) + " is out");
                playerList.get(turnIndex).setOut(true);
                displayDryBoneyard();
                Timer timer = new Timer();
                TimerTask task = new TimerTask() {
                    @Override
                    public void run() {
                        for (Component c : panel_dominoTrack.getComponents()) {
                            if (c.getName() != null)
                                c.setEnabled(true);
                            else
                                panel_dominoTrack.remove(c);
                        }
                        nextTurn();
                    }
                };
                timer.schedule(task, 3000);
            }
        } else {
            playerList.get(turnIndex).setOut(false);
        }
    }
    
    private void updateScoreTable() {
        //set up table
        String[][] model;
        String[] columNames;
        System.out.println("Team :: " + team);
        if (team) {
            System.out.println("Team table");
            model = new String[playerList.size()][3];
            columNames = new String[3];
            columNames[0] = "Team";
            columNames[1] = "Player";
            columNames[2] = "Score";
            
            //fill model
            for (int r = 0; r < model.length; r++) {
                model[r][0] = "" + playerList.get(r).getTeam();
                model[r][1] = "" + (r + 1);
                model[r][2] = "" + playerList.get(r).getScore();
            }
            
        } else {
            model = new String[playerList.size()][2];
            columNames = new String[2];
            columNames[0] = "Player";
            columNames[1] = "Score";
            
            //fill model
            for (int r = 0; r < model.length; r++) {
                model[r][0] = "" + (r + 1);
                model[r][1] = "" + playerList.get(r).getScore();
            }
        }
        
        //set up table
        for (String s : columNames)
            System.out.println(s);
        DefaultTableModel dfm = new DefaultTableModel(model, columNames);
        table_score.setModel(dfm);
        
        //set row height
        table_score.setRowHeight(table_score.getHeight() / table_score.getRowCount());
        table_score.setShowGrid(true);
    }
    
    private void dominoSelected(MouseEvent e) {
        //get rid of all seletion boxes in panel_track
        for (int i = 0; i < panel_dominoTrack.getComponentCount(); i++) {
            String name = panel_dominoTrack.getComponent(i).getName();
            if (name.contains("Selection Box")) {
                panel_dominoTrack.remove(panel_dominoTrack.getComponent(i));
                i--;
            }      
        }
        
        //get domino that was selected
        int domIndex = ((JLabel)e.getSource()).getX() - (label_player.getX() + label_player.getWidth() + 20);
        domIndex /= 110;
        ArrayList<Domino> hand = playerList.get(turnIndex).getHand();
        Domino selectedDomino = hand.get(domIndex);
        selectedDom = selectedDomino;
        
        //get array of open dominoes
        ArrayList<Domino> openDominoes = track.getOpenDominoes();
        
        //instantiate playable side map
        TreeMap<String, ArrayList<String>> openSideMap = new TreeMap();
        
        ArrayList<Domino> playableDoms = new ArrayList();
        
        for (Domino d : openDominoes) {
            //check to see if the open domino is a double
            if (d.getSideOneValue().equals(d.getSideTwoValue())) {
                if (d.getSideOneValue().equals(selectedDom.getSideOneValue()) || d.getSideOneValue().equals(selectedDom.getSideTwoValue()))
                    playableDoms.add(d);
            } else if (track.getTrack().size() == 1) {
                Integer trackDomS1 = d.getSideOneValue();
                Integer trackDomS2 = d.getSideTwoValue();
                Integer selectDomS1 = selectedDom.getSideOneValue();
                Integer selectDomS2 = selectedDom.getSideTwoValue();
                if (selectDomS1.equals(trackDomS1) || selectDomS1.equals(trackDomS2) || selectDomS2.equals(trackDomS1) || selectDomS2.equals(trackDomS2)) {
                    playableDoms.add(d);
                }
            } else {
            
                JLabel dLabel = new JLabel();
                //get domino label in track
                for (Component c : panel_dominoTrack.getComponents()) {
                    if (c.getName().contains(d.toString()))
                        dLabel = (JLabel)c;
                }
                          
                Integer openSideVal = null;
                if (dLabel.getWidth() > dLabel.getHeight()) {
                    //get the open side value for horizontal
                    if (d.getOpenSides().contains("left"))
                        openSideVal = d.getSideOneValue();
                    else
                        openSideVal = d.getSideTwoValue();
                    
                } else {
                    //get the open side value for vertical
                    if (d.getOpenSides().contains("up"))
                        openSideVal = d.getSideOneValue();
                    else
                        openSideVal = d.getSideTwoValue();
                }
                
                //check against selectedDomino sides
                if (openSideVal.equals(selectedDom.getSideOneValue()) || openSideVal.equals(selectedDom.getSideTwoValue()))
                    playableDoms.add(d);  
            }
        }
        
        //Load open side map with open sides
        Set s = track.getTrack().keySet();
        Object[] arr = s.toArray();
        Integer trackDomS1 = ((Domino)arr[0]).getSideOneValue();
        Integer trackDomS2 = ((Domino)arr[0]).getSideTwoValue();
        Integer selectDomS1 = selectedDom.getSideOneValue();
        Integer selectDomS2 = selectedDom.getSideTwoValue();
        if (track.getTrack().size() == 1 && !trackDomS1.equals(trackDomS2)) {
//            System.out.println(trackDomS2 + " == " + selectDomS1 + " :: " + trackDomS2.equals(selectDomS1));
//            System.out.println(trackDomS2 + " == " + selectDomS2 + " :: " + trackDomS2.equals(selectDomS2));
            ArrayList<String> list = new ArrayList();
            if (trackDomS1.equals(selectDomS1) || trackDomS1.equals(selectDomS2)) {
                list.add("left");
                openSideMap.put(((Domino)arr[0]).toString(), list);
            } else if (trackDomS2.equals(selectDomS1) || trackDomS2.equals(selectDomS2)) {
                list.add("right");
                openSideMap.put(((Domino)arr[0]).toString(), list);
            }
        } else {
            for (Domino d : playableDoms) {
                openSideMap.put(d.toString(), d.getOpenSides());
            }
        }
        
        //create mouse listener to add to option labels
        MouseListener listener = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                boxSelected(e);
            }

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {}

            @Override
            public void mouseEntered(MouseEvent e) {}

            @Override
            public void mouseExited(MouseEvent e) {}
        };
        
        //draw green labels on panel_dominoTrack
        Set keys = openSideMap.keySet();
        Iterator<String> iterator = keys.iterator();
        while (iterator.hasNext()) {
            String key = iterator.next();
            
            //get label for key dom
            JLabel trackLabel = new JLabel();
            for (int i = 0; i < panel_dominoTrack.getComponentCount(); i++) {
                if (panel_dominoTrack.getComponent(i).getName().contains(key)) {
                    trackLabel = (JLabel)panel_dominoTrack.getComponent(i);
                }
            }
            
            for (String str : openSideMap.get(key)) {
                JLabel label = new JLabel();
                label.setName(str + "-" + key + " Selection Box");
                label.setOpaque(true);
                if (str.equals("up")) {
                    //set bounds for vertical or horizontal
                    if (trackLabel.getWidth() < trackLabel.getHeight())
                        label.setBounds(trackLabel.getX(), trackLabel.getY() - trackLabel.getHeight(), trackLabel.getWidth(), trackLabel.getHeight());
                    else
                        label.setBounds(trackLabel.getX() + (trackLabel.getWidth() / 4), trackLabel.getY() - trackLabel.getWidth(), trackLabel.getHeight(), trackLabel.getWidth());
                } else if (str.equals("down")) {
                    //set bounds for vertical or horizontal
                    if (trackLabel.getWidth() < trackLabel.getHeight())
                        label.setBounds(trackLabel.getX(), trackLabel.getY() + trackLabel.getHeight(), trackLabel.getWidth(), trackLabel.getHeight());
                    else
                        label.setBounds(trackLabel.getX() + (trackLabel.getWidth() / 4), trackLabel.getY() + trackLabel.getHeight(), trackLabel.getHeight(), trackLabel.getWidth());
                    trackLabel.setBackground(Color.green);
                } else if (str.equals("left")) {
                    //set bounds for vertical or horizontal
                    if (trackLabel.getWidth() < trackLabel.getHeight())
                        label.setBounds(trackLabel.getX() - trackLabel.getHeight(), trackLabel.getY() + (trackLabel.getHeight() / 4), trackLabel.getHeight(), trackLabel.getWidth());
                    else
                        label.setBounds(trackLabel.getX() - trackLabel.getWidth(), trackLabel.getY(), trackLabel.getWidth(), trackLabel.getHeight());
                } else if (str.equals("right")) {
                    //set bounds for vertical or horizontal
                    if (trackLabel.getWidth() < trackLabel.getHeight())
                        label.setBounds(trackLabel.getX() + trackLabel.getWidth(), trackLabel.getY() + (trackLabel.getHeight() / 4), trackLabel.getHeight(), trackLabel.getWidth());
                    else
                        label.setBounds(trackLabel.getX() + trackLabel.getWidth(), trackLabel.getY(), trackLabel.getWidth(), trackLabel.getHeight());
                }
                label.setBackground(Color.green);
                //add mouse lsitener
                label.addMouseListener(listener);
                panel_dominoTrack.add(label); 
                panel_dominoTrack.setComponentZOrder(label, 0);
            }
        }
        
        //check to see if there are any "Selection Boxes" in dominoTrack panel and 
        //change the instruction label accordingly
//        boolean isSBox = false;
//        for (Component c : panel_dominoTrack.getComponents()) {
//            if (c.getName().contains("Selection Box")) {
//                isSBox = true;
//            }
//        }
        
        if (!openSideMap.isEmpty())
            label_instructionLabel.setText("Player " + (turnIndex + 1) + ": Select the green box where you would like to place your domino");
        else
            label_instructionLabel.setText("Player " + (turnIndex + 1) + ": This domino cannot be played, please select a different domino");
        
        panel_dominoTrack.repaint();
        
        //check to see if everything is in panel_dominoTrack
        for (Component comp : panel_dominoTrack.getComponents()) {
            if (!componentIsIn(panel_dominoTrack, comp))
                centerTrack();
    
            while (!componentIsIn(panel_dominoTrack, comp)) {
                //System.out.println("Zooming Out ... ");
                zoomOut();
            }
        }
    }
    
    private void firstDominoSelected(MouseEvent e) {
        //get rid of all labels in panel_track
        for (int i = 0; i < panel_dominoTrack.getComponentCount(); i++) {
            String name = panel_dominoTrack.getComponent(i).getName();
            if (name.contains("Selection Box")) {
                panel_dominoTrack.remove(panel_dominoTrack.getComponent(i));
                i--;
            }      
        }
        
        //get label that was selected
        JLabel selectedLabel = (JLabel)(e.getComponent());
        
        //get domino that was selected
        int domIndex = ((JLabel)e.getSource()).getX() - (label_player.getX() + label_player.getWidth() + 20);
        domIndex /= 110;
        ArrayList<Domino> hand = playerList.get(turnIndex).getHand();
        Domino selectedDomino = hand.get(domIndex);
        selectedDom = selectedDomino;
        
        //mouse listener to add to green selection box
        MouseListener listener = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                boxSelected(e);
            }

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {}

            @Override
            public void mouseEntered(MouseEvent e) {}

            @Override
            public void mouseExited(MouseEvent e) {}
        };
        
        //draw green labels on panel_dominoTrack
        JLabel selectionBox = new JLabel();
        selectionBox.setName("Selection Box");
        selectionBox.setBounds((panel_dominoTrack.getWidth() / 2) - (selectedLabel.getHeight() / 2), (panel_dominoTrack.getHeight() / 2) - (selectedLabel.getWidth() / 2), 200, 100);
        selectionBox.setBackground(Color.green);
        selectionBox.setOpaque(true);
        selectionBox.addMouseListener(listener);
        
        //add box to panel
        panel_dominoTrack.add(selectionBox);
        panel_dominoTrack.setComponentZOrder(selectionBox, 0);
        panel_dominoTrack.repaint();
    }
    
    private ImageIcon resizeImageIcon(ImageIcon icon, JLabel label) {
        Image image = icon.getImage();
        image = image.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
        icon = new ImageIcon(image);
        return icon;
    }
    
    private void inverseDominoColor(MouseEvent e) {
        //get index in hand that 
        int domIndex = ((JLabel)e.getSource()).getX() - (label_player.getX() + label_player.getWidth() + 20);
        domIndex /= 110;
        ArrayList<Domino> hand = playerList.get(turnIndex).getHand();
        Domino domino = (Domino) hand.get(domIndex);
        
        //inverse color of selected domino
        if (!domino.isSelected()) {
            ImageIcon icon = domino.getInverseImageIcon(domino);
            icon = resizeImageIcon(icon, (JLabel)e.getSource());
            ((JLabel)e.getSource()).setIcon(icon);
            domino.setSelected(true);
        } else {
            ImageIcon icon = domino.getImageIcon(domino.toString(), "vertical");
            icon = resizeImageIcon(icon, (JLabel)e.getSource());
            ((JLabel)e.getSource()).setIcon(icon);
            clearPanel();
            label_instructionLabel.setText("Player " + (turnIndex + 1) + ": Please select the domino that you would like to play.");
            domino.setSelected(false);
        }
        
        //set all other dominoes to normal image
        for (int i = 0; i < hand.size(); i++) {
            if (hand.get(i).isSelected()) {
                if (!hand.get(i).equals(domino)) {
                    String name = hand.get(i).getSideOneValue() + ":" + hand.get(i).getSideTwoValue();
                    hand.get(i).setSelected(false);
                    JLabel label = (JLabel)panel_gamePlay.getComponent(hand.size() - (i + 1));
                    ImageIcon regIcon = hand.get(i).getImageIcon(name, "vertical");
                    regIcon = resizeImageIcon(regIcon, label);
                    label.setIcon(regIcon);
                }
            }
        }
    }
    
    private void clearPanel() {
        for (int i = 0; i < panel_dominoTrack.getComponentCount(); i++) {
            String name = panel_dominoTrack.getComponent(i).getName();
            
            if (name != null && name.contains("Selection Box")) {
                panel_dominoTrack.remove(panel_dominoTrack.getComponent(i));
                //System.out.println("removing " + name);
                i--;
            }
        }
        //System.out.println("Panel count :: " + panel_dominoTrack.getComponentCount());
        panel_gamePlay.repaint();
        panel_dominoTrack.repaint();
    }
    
    private void boxSelected(MouseEvent e) {
        //remove action listener from dominos in hand
        for (int i = 0; i < playerList.get(turnIndex).getHand().size(); i++) {
            Component c = panel_gamePlay.getComponent(i);
            for (MouseListener l : c.getMouseListeners())
                c.removeMouseListener(l);
        }
        
        
        JLabel selectedLabel = (JLabel)e.getSource();
        String labelName = selectedLabel.getName();
        String domName = labelName.substring(labelName.indexOf("-") + 1);
        
        System.out.println("Dom name :: " + domName);
        
        String name = selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue();
        
        if (track.getTrack().isEmpty()) {
            selectedLabel.setOpaque(false);
            selectedLabel.setName(selectedDom.toString() + " root");
            ImageIcon icon = resizeImageIcon(selectedDom.getImageIcon(selectedDom.toString(), "horizontal"), selectedLabel);
            selectedLabel.setIcon(icon);
            
            //set selected dom open sides
            if (selectedDom.getSideOneValue().equals(selectedDom.getSideTwoValue()))
                selectedDom.setOpenSides("up down left right");
            else
                selectedDom.setOpenSides("left right");
            
            //add selected dom to track
            track.add(selectedDom);
            
        } else {
            
            System.out.println("\nDOMNAME :: " + domName);
            System.out.println();
            
            Integer trackDomSide1 = Integer.parseInt(domName.substring(0, domName.indexOf(":")));
            Integer trackDomSide2 = Integer.parseInt(domName.substring(domName.indexOf(":") + 1, domName.indexOf(":") + 2));
            String trackDom = trackDomSide1 + ":" + trackDomSide2;
            Domino trackDomino = new Domino(trackDom);
            
            String trackDCloseSide = "";
            String selectedDCloseSide = "";
            
            ////////////get the right image icon//////////////
            Integer trackSide = 0;

            if (labelName.contains("Selection Box")) {
                if (labelName.contains("up")) {
                    trackSide = trackDomSide1;
                    trackDCloseSide = "up";
                    selectedDCloseSide = "down";
                    if (selectedDom.getSideOneValue().equals(trackSide)) {
                        selectedLabel.setName(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue() + " - up");
                        selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue(), "vertical"));
                        int s1 = selectedDom.getSideOneValue();
                        int s2 = selectedDom.getSideTwoValue();
                        selectedDom.setSideOneValue(s2);
                        selectedDom.setSideTwoValue(s1);
                    } else {
                        selectedLabel.setName(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue() + " - up");
                        selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue(), "vertical"));
                    }
                } else if (labelName.contains("left")) {
                    trackSide = trackDomSide1;
                    trackDCloseSide = "left";
                    selectedDCloseSide = "right";
                    if (selectedDom.getSideOneValue().equals(trackSide)) {
                        selectedLabel.setName(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue() + " - left");
                        selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue(), "horizontal"));
                        int s1 = selectedDom.getSideOneValue();
                        int s2 = selectedDom.getSideTwoValue();
                        selectedDom.setSideOneValue(s2);
                        selectedDom.setSideTwoValue(s1);
                    } else {
                        selectedLabel.setName(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue() + " - left");
                        selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue(), "horizontal"));
                    }
                } else if (labelName.contains("down")) {
                    trackSide = trackDomSide2;
                    trackDCloseSide = "down";
                    selectedDCloseSide = "up";
                    if (selectedDom.getSideOneValue().equals(trackSide)) {
                        selectedLabel.setName(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue() + " - down");
                        selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue(), "vertical"));
                    } else {
                        selectedLabel.setName(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue() + " - down");
                        selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue(), "vertical"));
                        int s1 = selectedDom.getSideOneValue();
                        int s2 = selectedDom.getSideTwoValue();
                        selectedDom.setSideOneValue(s2);
                        selectedDom.setSideTwoValue(s1);
                    }
                } else if (labelName.contains("right")) {
                    trackSide = trackDomSide2;
                    trackDCloseSide = "right";
                    selectedDCloseSide = "left";
                    if (selectedDom.getSideOneValue().equals(trackSide)) {
                        selectedLabel.setName(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue() + " - right");
                        selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue(), "horizontal"));
                    } else {
                        selectedLabel.setName(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue() + " - right");
                        selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue(), "horizontal"));
                        int s1 = selectedDom.getSideOneValue();
                        int s2 = selectedDom.getSideTwoValue();
                        selectedDom.setSideOneValue(s2);
                        selectedDom.setSideTwoValue(s1);
                    }
                }
            }
            selectedLabel.setOpaque(false);
            ImageIcon icon = resizeImageIcon((ImageIcon)selectedLabel.getIcon(), selectedLabel);
            selectedLabel.setIcon(icon);

            
            //add selected label to domino track and connect
            if (!selectedDom.getSideOneValue().equals(selectedDom.getSideTwoValue())) {
                if (selectedLabel.getWidth() > selectedLabel.getHeight())
                    selectedDom.setOpenSides("left right");
                else
                    selectedDom.setOpenSides("up down");
            }
            track.add(selectedDom);
            //System.out.println("adding " + selectedDom.toString() + " to " + new Domino(trackDom));
            track.connect(selectedDom, trackDomino, trackSide);
            //update dom sides
            track.closeSide(trackDomino.toString(), trackDCloseSide);
            track.closeSide(selectedDom.toString(), selectedDCloseSide);
            
            //update dom booleans
    //        track.getD
    //        if (trackDomino.getSideOneValue() != trackDomino.getSideTwoValue()) {
    //            if(trackDomino.getSideOneValue() == trackSide)
    //                trackDomino.setSideOneOpen(false);
    //            else
    //                trackDomino.setSideTwoOpen(false);
    //        }
        }
        ///////////remove the selected dom from hand///////////
        playerList.get(turnIndex).remove(selectedDom);
        for (int i = 0; i < panel_gamePlay.getComponentCount(); i++) {
            Component comp = panel_gamePlay.getComponent(i);
            if (comp.getName() != (null) && comp.getName().equals(name))
                panel_gamePlay.remove(i);
        }
        
        //remove green box labels from panel
        clearPanel();
        
        panel_gamePlay.repaint();
        panel_dominoTrack.repaint();
        
        //Go to next turn
        Timer timer = new Timer();
        TimerTask startNexTurn = new TimerTask() {
            @Override
            public void run() {
                nextTurn();
            }
        };
        
        timer.schedule(startNexTurn, 750);
        
    }
    
    private void updateHandDisplay() {
        MouseListener dominoClicked = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                dominoSelected(e);
                inverseDominoColor(e);
                
            }

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {}

            @Override
            public void mouseEntered(MouseEvent e) {}

            @Override
            public void mouseExited(MouseEvent e) {}
        };

        String name = "";
        Player player1 = playerList.get(turnIndex);
        int x = label_player.getX() + label_player.getWidth() + 20;
        int y = label_player.getY() - 30;
        for (Domino domino : (ArrayList<Domino>) player1.getHand()) {
            name = domino.getSideOneValue() + ":" + domino.getSideTwoValue();
            JLabel dominoLabel = new JLabel();
            dominoLabel.setName(name);
            dominoLabel.setBounds(x, y, 100, 200);
            dominoLabel.setIcon(resizeImageIcon(domino.getImageIcon(name, "vertical"), dominoLabel));
            dominoLabel.addMouseListener(dominoClicked);
            panel_gamePlay.add(dominoLabel);
            panel_gamePlay.setComponentZOrder(dominoLabel, 0);
            x += 110;
        }
        
        panel_gamePlay.repaint();
    }
    
    private void nextTurn() {
        //check to see if anybody won the round
        if (!isRoundOver()) {
            //clear existing hand
            for (Component c : panel_gamePlay.getComponents()) {
                if (c.getName() != null && c.getName().contains(":"))
                    panel_gamePlay.remove(c);
            }

            //increment turnIndex
            if (turnIndex + 1 == playerList.size())
                turnIndex = 0;
            else {
                turnIndex++;
            }

            //update player Label
            label_player.setText("Player " + (turnIndex + 1) + ":");
            
            //update instruction label
            label_instructionLabel.setText("Player " + (turnIndex + 1) + ": Select the domino that you would like to play");
            
            if (playerList.get(turnIndex).isComputer()) {
                startComputerTurn();
            } else {
                //display new hand
                updateHandDisplay();
                
                System.out.println("Player " + (turnIndex + 1) + " draw :: " + draw(playerList.get(turnIndex)));
                if (draw(playerList.get(turnIndex))) {
                    if (!boneyard.isEmpty()) {
                        displayDraw();
                        playerList.get(turnIndex).setOut(false);
                    } else {
                        System.out.println((turnIndex + 1) + " is out");
                        playerList.get(turnIndex).setOut(true);
                        displayDryBoneyard();
                        Timer timer = new Timer();
                        TimerTask task = new TimerTask() {
                            @Override
                            public void run() {
                                for (Component c : panel_dominoTrack.getComponents()) {
                                    if (c.getName() != null)
                                        c.setEnabled(true);
                                    else
                                        panel_dominoTrack.remove(c);
                                }
                                nextTurn();
                            }
                        };
                        timer.schedule(task, 3000);
                    }
                } else {
                    playerList.get(turnIndex).setOut(false);
                }
            }
        } else {
            endRound();
        }
        
    }
    
    private void startComputerTurn() {
        Timer turnTimer = new Timer();

        TimerTask domSelected = new TimerTask() {
            @Override
            public void run() {
                //////inverse selected domino color////////
                //get the JLabel that matched the selected domino
                JLabel label = new JLabel();
                for (Component c : panel_gamePlay.getComponents()) {
                    if (c.getName() != null && c.getName().equals(selectedDom.toString())) {
                        label = (JLabel) c;
                    }
                }

                ImageIcon icon = selectedDom.getInverseImageIcon(selectedDom);
                icon = resizeImageIcon(icon, label);
                label.setIcon(icon);
                panel_gamePlay.repaint();
            }
        };

        TimerTask startNextTurn = new TimerTask() {
            @Override
            public void run() {
                nextTurn();
            }
        };

        //display computer hand
        updateHandDisplay();

        //remove mouse liseners from domino labels
        for (Component c : panel_gamePlay.getComponents()) {
            if (c.getName() != null && c.getName().contains(":")) {
                for (MouseListener l : c.getMouseListeners()) {
                    c.removeMouseListener(l);
                }
            }
        }
        
        //System.out.println("1");
        if (draw(playerList.get(turnIndex))) {
            if (!boneyard.isEmpty()) {
                playerList.get(turnIndex).setOut(false);
                displayDraw();
                drawDomino();
            } else {
                System.out.println((turnIndex + 1) + " is out");
                playerList.get(turnIndex).setOut(true);
                nextTurn();
            }
        } else {
            playerList.get(turnIndex).setOut(false);
        }
        //System.out.println("2");

        //get the domino the computer is going to play
        Domino playDom = playerList.get(turnIndex).highestRank();
        
        //System.out.println("PLAYDOM :: " + playDom.getSideOneValue() + ":" + playDom.getSideTwoValue());

        //make temperary hand arrayList
        ArrayList<Domino> hand = new ArrayList();
        
//        System.out.println("Player " + (turnIndex + 1) + " hand :: ");
//        for (Domino d : (ArrayList<Domino>) playerList.get(turnIndex).getHand()){
//            System.out.print(d + " ");
//        }
//        System.out.println("\n");
        
        for (Domino d : (ArrayList<Domino>) playerList.get(turnIndex).getHand()) {
            hand.add(d);
        }
        
//        System.out.println("Player " + (turnIndex + 1) + " temp hand :: ");
//        for (Domino d : hand){
//            System.out.print(d + " ");
//        }
//        System.out.println("\n");
        
        Player p = new Player();
        //System.out.println("Can play " + playDom + " : " + canPlay(playDom));
        while (!canPlay(playDom)) {
            //System.out.println("checking dom :: " + playDom);
            hand.remove(playDom);
            p.setHand(hand);
            //check p's hand
//            System.out.println("P's hand :: ");
//            for (Domino d : hand) {
//                System.out.print(d + " ");
//            }
//            System.out.println("\n");
//            ArrayList<Domino> newHand = new ArrayList();
//            for (Domino d : hand) {
//                if (!d.toString().equals(playDom.toString()))
//                    newHand.add(d);
//            }
//            p.setHand(newHand);
            playDom = p.highestRank();
//            System.out.println("PLAYDOM :: " + playDom.getSideOneValue() + ":" + playDom.getSideTwoValue());
//            System.out.println("Can play " + playDom.toString() + " : " + canPlay(playDom));
        }

        selectedDom = playDom;
        
        //System.out.println("\n\nSelected Dom :: " + selectedDom);

        //get selection box list
        ArrayList<JLabel> selectionBoxList = getSelectionBoxes(playDom);
        
//        System.out.println("\nSelection Box List :: ");
//        for (JLabel l : selectionBoxList)
//            System.out.println(l.getName());
//        System.out.println("\n");

        JLabel selectedLabel = selectionBoxList.get((int) (Math.random() * selectionBoxList.size()));

        //System.out.println("Selected Label :: " + selectedLabel.getName());

        TimerTask updateTrack = new TimerTask() {
            @Override
            public void run() {
                addDominoToTrack(selectedLabel);
            }
        };
        
        
        //Execute the turn////////////////
        turnTimer.schedule(domSelected, 1500);
        turnTimer.schedule(updateTrack, 3000);
        turnTimer.schedule(startNextTurn, 4000);
    }
    
    private void addDominoToTrack(JLabel selectedLabel) {
        
        String name = selectedLabel.getName();
        String n = selectedDom.toString();
        
        if (track.getTrack().isEmpty()) {
            selectedLabel.setOpaque(false);
            selectedLabel.setName(selectedDom.toString() + " root");
            ImageIcon icon = resizeImageIcon(selectedDom.getImageIcon(selectedDom.toString(), "horizontal"), selectedLabel);
            selectedLabel.setIcon(icon);

            panel_dominoTrack.add(selectedLabel);
            panel_dominoTrack.setComponentZOrder(selectedLabel, 0);

            //add selected label to domino track and connect
            if (!selectedDom.getSideOneValue().equals(selectedDom.getSideTwoValue())) {
                if (selectedLabel.getWidth() > selectedLabel.getHeight())
                    selectedDom.setOpenSides("left right");
                else
                    selectedDom.setOpenSides("up down");
            }

            track.add(selectedDom);

            ///////////remove the selected dom from hand///////////
            playerList.get(turnIndex).remove(selectedDom);
            for (int i = 0; i < panel_gamePlay.getComponentCount(); i++) {
                Component comp = panel_gamePlay.getComponent(i);
                if (comp.getName() != (null) && comp.getName().equals(n))
                    panel_gamePlay.remove(i);
            }

            panel_gamePlay.repaint();
            panel_dominoTrack.repaint();
        } else {
            Domino trackDomino = new Domino(name.substring(name.indexOf(":") - 1, name.indexOf(":") + 2));
            int trackSide = 0;
            int trackDomSide1 = trackDomino.getSideOneValue();
            int trackDomSide2 = trackDomino.getSideTwoValue();
            String trackDCloseSide = "";
            String selectedDCloseSide = "";
            
            if (name.contains("up")) {
                trackSide = trackDomSide1;
                trackDCloseSide = "up";
                selectedDCloseSide = "down";
                if (selectedDom.getSideOneValue() == trackSide) {
                    selectedLabel.setName(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue() + " - up");
                    selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue(), "vertical"));
                    int s1 = selectedDom.getSideOneValue();
                    int s2 = selectedDom.getSideTwoValue();
                    selectedDom.setSideOneValue(s2);
                    selectedDom.setSideTwoValue(s1);
                } else {
                    selectedLabel.setName(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue() + " - up");
                    selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue(), "vertical"));
                }
            } else if (name.contains("left")) {
                trackSide = trackDomSide1;
                trackDCloseSide = "left";
                selectedDCloseSide = "right";
                if (selectedDom.getSideOneValue() == trackSide) {
                    selectedLabel.setName(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue() + " - left");
                    selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue(), "horizontal"));
                    int s1 = selectedDom.getSideOneValue();
                    int s2 = selectedDom.getSideTwoValue();
                    selectedDom.setSideOneValue(s2);
                    selectedDom.setSideTwoValue(s1);
                } else {
                    selectedLabel.setName(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue() + " - left");
                    selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue(), "horizontal"));
                }
            } else if (name.contains("down")) {
                trackSide = trackDomSide2;
                trackDCloseSide = "down";
                selectedDCloseSide = "up";
                if (selectedDom.getSideOneValue() == trackSide) {
                    selectedLabel.setName(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue() + " - down");
                    selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue(), "vertical"));
                } else {
                    selectedLabel.setName(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue() + " - down");
                    selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue(), "vertical"));
                    int s1 = selectedDom.getSideOneValue();
                    int s2 = selectedDom.getSideTwoValue();
                    selectedDom.setSideOneValue(s2);
                    selectedDom.setSideTwoValue(s1);
                }
            } else if (name.contains("right")) {
                trackSide = trackDomSide2;
                trackDCloseSide = "right";
                selectedDCloseSide = "left";
                if (selectedDom.getSideOneValue() == trackSide) {
                    selectedLabel.setName(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue() + " - right");
                    selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideOneValue() + ":" + selectedDom.getSideTwoValue(), "horizontal"));
                } else {
                    selectedLabel.setName(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue() + " - right");
                    selectedLabel.setIcon(selectedDom.getImageIcon(selectedDom.getSideTwoValue() + ":" + selectedDom.getSideOneValue(), "horizontal"));
                    int s1 = selectedDom.getSideOneValue();
                    int s2 = selectedDom.getSideTwoValue();
                    selectedDom.setSideOneValue(s2);
                    selectedDom.setSideTwoValue(s1);
                }
            }
            
            
            selectedLabel.setOpaque(false);
            ImageIcon icon = resizeImageIcon((ImageIcon)selectedLabel.getIcon(), selectedLabel);
            selectedLabel.setIcon(icon);
            
            panel_dominoTrack.add(selectedLabel);
            panel_dominoTrack.setComponentZOrder(selectedLabel, 0);
            

            //add selected label to domino track and connect
            if (!selectedDom.getSideOneValue().equals(selectedDom.getSideTwoValue())) {
                if (selectedLabel.getWidth() > selectedLabel.getHeight())
                    selectedDom.setOpenSides("left right");
                else
                    selectedDom.setOpenSides("up down");
            }

            track.add(selectedDom);
            //System.out.println("adding " + selectedDom.toString() + " to " + new Domino(trackDom));
            track.connect(selectedDom, trackDomino, trackSide);
            //update dom sides
            track.closeSide(trackDomino.toString(), trackDCloseSide);
            track.closeSide(selectedDom.toString(), selectedDCloseSide);

            ///////////remove the selected dom from hand///////////
            playerList.get(turnIndex).remove(selectedDom);
            for (int i = 0; i < panel_gamePlay.getComponentCount(); i++) {
                Component comp = panel_gamePlay.getComponent(i);
                if (comp.getName() != (null) && comp.getName().equals(n))
                    panel_gamePlay.remove(i);
            }
            
            panel_gamePlay.repaint();
            panel_dominoTrack.repaint();
            
            //check to see if everything is in panel_dominoTrack
            for (Component comp : panel_dominoTrack.getComponents()) {
                if (!componentIsIn(panel_dominoTrack, comp))
                    centerTrack();

                while (!componentIsIn(panel_dominoTrack, comp)) {
                    //System.out.println("Zooming Out ... ");
                    zoomOut();
                }
            }
        }
    }
    
    private void zoomOut() {
        for (int i = 0; i < panel_dominoTrack.getComponentCount(); i++) {
            JLabel dominoLabel = (JLabel)panel_dominoTrack.getComponent(i);

            //move set new bounds
            int domHeight = dominoLabel.getHeight();
            int domWidth = dominoLabel.getWidth();
            int domX = dominoLabel.getX();
            int domY = dominoLabel.getY();
            if (dominoLabel.getName().contains("root")) {
                domX += (domWidth) / 10;
                domY += (domHeight) / 10;
            } 
            dominoLabel.setBounds(domX, domY, (4 * domWidth) / 5, (4 * domHeight) / 5);
          
            //resizeIcon
            if (dominoLabel.getIcon() != null)
                dominoLabel.setIcon(resizeImageIcon((ImageIcon)dominoLabel.getIcon(), dominoLabel));
        }
        
        adjustXY();
        
        panel_dominoTrack.repaint();
    }
    
    private void adjustXY() {
        for (int i = panel_dominoTrack.getComponentCount() - 1; i > -1; i--){
            JLabel label = (JLabel)panel_dominoTrack.getComponent(i);
            int x = label.getX();
            int y = label.getY();
            String name = label.getName();
            String domName = label.getName().substring(name.indexOf(":") - 1, name.indexOf(":")) + name.substring(name.indexOf(":"), name.indexOf(":") + 2);
            //System.out.println("domName :: " + domName);
            JLabel prevLabel = new JLabel();
            
            //get previous label
            for (int j = 0; j < panel_dominoTrack.getComponentCount(); j++) {
                String n = panel_dominoTrack.getComponent(j).getName();
                String labelName = n.substring(n.indexOf(":") - 1, n.indexOf(":")) + n.substring(n.indexOf(":"), n.indexOf(":") + 2);
                String connectName = "";
                if (!name.contains("Selection Box")) {
                    connectName = track.getTrack().get(new Domino(domName))[0].toString();
                    if (labelName.equals(connectName)) {
                        prevLabel = (JLabel)panel_dominoTrack.getComponent(j);
                    }
                } else {
                    //System.out.println(domName + " == " + labelName + " :: " + domName.equals(labelName));
                    //System.out.println("Selection Box ... " + domName.equals(labelName) + " + " + (!panel_dominoTrack.getComponent(j).getName().contains("Selection Box")));
                    
                    if (domName.equals(labelName) && !panel_dominoTrack.getComponent(j).getName().contains("Selection Box"))
                        prevLabel = (JLabel)panel_dominoTrack.getComponent(j);
                }
            }
            
            if (name.contains("up")) {
                    //set bounds for vertical or horizontal
                if (prevLabel.getWidth() < prevLabel.getHeight())
                    label.setBounds(prevLabel.getX(), prevLabel.getY() - prevLabel.getHeight(), prevLabel.getWidth(), prevLabel.getHeight());
                else
                    label.setBounds(prevLabel.getX() + (prevLabel.getWidth() / 4), prevLabel.getY() - prevLabel.getWidth(), prevLabel.getHeight(), prevLabel.getWidth());
            } else if (name.contains("down")) {
                //set bounds for vertical or horizontal
                if (prevLabel.getWidth() < prevLabel.getHeight())
                    label.setBounds(prevLabel.getX(), prevLabel.getY() + prevLabel.getHeight(), prevLabel.getWidth(), prevLabel.getHeight());
                else
                    label.setBounds(prevLabel.getX() + (prevLabel.getWidth() / 4), prevLabel.getY() + prevLabel.getHeight(), prevLabel.getHeight(), prevLabel.getWidth());
            } else if (name.contains("left")) {
                //set bounds for vertical or horizontal
                if (prevLabel.getWidth() < prevLabel.getHeight())
                    label.setBounds(prevLabel.getX() - prevLabel.getHeight(), prevLabel.getY() + (prevLabel.getHeight() / 4), prevLabel.getHeight(), prevLabel.getWidth());
                else
                    label.setBounds(prevLabel.getX() - prevLabel.getWidth(), prevLabel.getY(), prevLabel.getWidth(), prevLabel.getHeight());
            } else if (name.contains("right")) {
                //set bounds for vertical or horizontal
                if (prevLabel.getWidth() < prevLabel.getHeight())
                    label.setBounds(prevLabel.getX() + prevLabel.getWidth(), prevLabel.getY() + (prevLabel.getHeight() / 4), prevLabel.getHeight(), prevLabel.getWidth());
                else
                    label.setBounds(prevLabel.getX() + prevLabel.getWidth(), prevLabel.getY(), prevLabel.getWidth(), prevLabel.getHeight());
            }
        }
        
        centerTrack();
        
        panel_dominoTrack.repaint();
    }
    
    private void centerTrack() {
        //System.out.println("Center Track...");

        //get the top left point
        int leftX = panel_dominoTrack.getComponent(0).getX();
        int topY = panel_dominoTrack.getComponent(0).getY();
        int rightX = leftX;
        int botY = topY;
        for (Component comp : panel_dominoTrack.getComponents()) {
             if (comp.getX() < leftX)
                leftX = comp.getX();
            if (comp.getY() < topY)
                topY = comp.getY();
            if ((comp.getX() + comp.getWidth()) > rightX)
                rightX = comp.getX() + comp.getWidth();
            if ((comp.getY() + comp.getHeight()) > botY)
                botY = comp.getY() + comp.getHeight();
        }
        int displayBoxW = rightX - leftX;
        int displayBoxH = botY - topY;
        
        //get the x change
        int midX = panel_dominoTrack.getWidth() - displayBoxW;
        midX /= 2;
        int xChange = midX - leftX;
        
        //get Y change
        int midY = panel_dominoTrack.getHeight() - displayBoxH;
        midY /= 2;
        int yChange = midY - topY;

        //change each domino location to center
        for (Component comp : panel_dominoTrack.getComponents()) {
            Point p = new Point(comp.getX() + xChange, comp.getY() + yChange);
            comp.setLocation(p);
        }
        
        //get the top left point
        leftX = panel_dominoTrack.getComponent(0).getX();
        topY = panel_dominoTrack.getComponent(0).getY();
        rightX = leftX;
        botY = topY;
        for (Component comp : panel_dominoTrack.getComponents()) {
            if (comp.getX() < leftX)
                leftX = comp.getX();
            if (comp.getY() < topY)
                topY = comp.getY();
            if ((comp.getX() + comp.getWidth()) > rightX)
                rightX = comp.getX() + comp.getWidth();
            if ((comp.getY() + comp.getHeight()) > botY)
                botY = comp.getY() + comp.getHeight();
        }
        displayBoxW = rightX - leftX;
        displayBoxH = botY - topY;
        
//        System.out.println("top blank :: " + topY);
//        System.out.println("bot blank :: " + (panel_dominoTrack.getHeight() - botY));
//        System.out.println("right blank :: " + (panel_dominoTrack.getWidth() - rightX));
//        System.out.println("left blank :: " + leftX);
        
//        JLabel displayBox = new JLabel("display Box");
//        //displayBox.setBackground(Color.red);
//        //displayBox.setOpaque(true);
//
//        displayBox.setBounds(midX, midY, displayBoxW, displayBoxH);
//        //System.out.println("midX :: " + midX + "\nmidY :: " + midY + "\ndisplayBoxW :: " + displayBoxW + "\ndisplayBoxH :: " + displayBoxH);
//        
//        //test box
//        panel_dominoTrack.add(displayBox);
//        panel_dominoTrack.setComponentZOrder(displayBox, panel_dominoTrack.getComponentCount() - 1);
//        panel_dominoTrack.repaint();
    }
    
    private void displayDraw() {
        System.out.println("DRAW");
        
        //disable all doms in panel_dominoTrack 
        for (Component c : panel_dominoTrack.getComponents()) {
            c.setEnabled(false);
        }
        
        ActionListener l = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ///////add if statement to display boneyard dry or not
                drawDomino();
            }
        };
        
        //create draw button
        JButton drawButton = new JButton("Draw Domino");
        drawButton.setName("drawButton");
        drawButton.setBounds((panel_dominoTrack.getWidth() / 2) - 100, (panel_dominoTrack.getHeight() / 2) - 25, 200, 50);
        drawButton.setFont(new Font("Stencil", Font.PLAIN, 20));
        drawButton.addActionListener(l);
        
        
        panel_dominoTrack.add(drawButton);
        panel_dominoTrack.setComponentZOrder(drawButton, 0);
        panel_dominoTrack.repaint();
    }
    
    private boolean componentIsIn(JPanel panel, Component comp) {
        if (comp.getX() >= 0 && (comp.getX() + comp.getWidth()) <= panel.getWidth()) {
            if (comp.getY() >= 0 && (comp.getY() + comp.getHeight()) <= panel.getHeight())
                return true;
        }
        return false;
    }
    
    private boolean draw(Player player) {
        //initial condition of first domino
        if (track.getTrack().isEmpty())
            return false;
        
        ArrayList<Domino> openDoms = track.getOpenDominoes();
        ArrayList<Integer> openSides = new ArrayList();
        
//        System.out.println("open Doms :: ");
//        for (Domino d : openDoms) {
//            System.out.print(d.toString() + " ");
//        }
//        
//        System.out.println();
        
        for (Domino d : openDoms) {
            if (d.getSideOneValue().equals(d.getSideTwoValue())) {
                for (Domino dom : (ArrayList<Domino>)player.getHand()) {
                    if (dom.getSideOneValue().equals(d.getSideOneValue()) || dom.getSideTwoValue().equals(d.getSideOneValue()))
                        return false;
                }
            } else {
                if (track.getTrack().get(d)[0] != null) {
                    Domino prevDom = track.getTrack().get(d)[0];
                    if (prevDom.getSideOneValue().equals(d.getSideOneValue()) || prevDom.getSideTwoValue().equals(d.getSideOneValue()))
                        openSides.add(d.getSideTwoValue());
                    else if (prevDom.getSideOneValue().equals(d.getSideTwoValue()) || prevDom.getSideTwoValue().equals(d.getSideTwoValue()))
                        openSides.add(d.getSideOneValue());
                } else {
                    openSides.add(d.getSideOneValue());
                    openSides.add(d.getSideTwoValue());
                }
            }
        }        
//        System.out.println("open Sides :: ");
//        for (Integer d : openSides) {
//            System.out.print(d.toString() + " ");
//        }
//        
//        System.out.println();
        
        for (Integer num : openSides) {
            for (Domino d : (ArrayList<Domino>)player.getHand()) {
                if (num.equals(d.getSideOneValue()) || num.equals(d.getSideTwoValue()))
                    return false;
            }
        }
        
        return true; 
    }
    
    private void drawDomino() {
        //update label_instructionLabel
        if (playerList.get(turnIndex).isComputer()) {
            label_instructionLabel.setText("Player " + (turnIndex + 1) + " had to draw a domino!");
        }
        
        //disable draw button
        panel_dominoTrack.getComponent(0).setEnabled(false);
        
        MouseListener dominoClicked = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                dominoSelected(e);
                inverseDominoColor(e);
                
            }

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {}

            @Override
            public void mouseEntered(MouseEvent e) {}

            @Override
            public void mouseExited(MouseEvent e) {}
        };
        
        Timer timer = new Timer();
        
        TimerTask drawDom = new TimerTask() {
            @Override
            public void run() {
                if (!boneyard.isEmpty()) {
                    if (draw(playerList.get(turnIndex))) {
                        //move domino from boneyard to player hand
                        Domino dom = boneyard.pop();
                        playerList.get(turnIndex).add(dom);
                        
                        //add domino label to panel
                        int x = label_player.getX() + label_player.getWidth() + 20;
                        int y = label_player.getY() - 30;
                        x += (110 * (playerList.get(turnIndex).getHand().size() - 1));
                        
                        JLabel domLabel = new JLabel();
                        domLabel.setName(dom.toString());
                        domLabel.setBounds(x, y, 100, 200);
                        ImageIcon icon = dom.getImageIcon(dom.toString(), "vertical");
                        icon = resizeImageIcon(icon, domLabel);
                        domLabel.setIcon(icon);
                        domLabel.addMouseListener(dominoClicked);
                        
                        panel_gamePlay.add(domLabel);
                        panel_gamePlay.setComponentZOrder(domLabel, 0);
                        panel_gamePlay.repaint();
                    } else
                        timer.cancel();
                } else {
                    System.out.println("Boneyard dry");
                    timer.cancel();
                }
            }
        };
        if (!playerList.get(turnIndex).isComputer())
            timer.schedule(drawDom, 0, 1000);
        else {
            while (!boneyard.isEmpty() && draw(playerList.get(turnIndex))) {
                 //move domino from boneyard to player hand
                Domino dom = boneyard.pop();
                playerList.get(turnIndex).add(dom);

                //add domino label to panel
                int x = label_player.getX() + label_player.getWidth() + 20;
                int y = label_player.getY() - 30;
                x += (110 * (playerList.get(turnIndex).getHand().size() - 1));

                JLabel domLabel = new JLabel();
                domLabel.setName(dom.toString());
                domLabel.setBounds(x, y, 100, 200);
                ImageIcon icon = dom.getImageIcon(dom.toString(), "vertical");
                icon = resizeImageIcon(icon, domLabel);
                domLabel.setIcon(icon);
                domLabel.addMouseListener(dominoClicked);

                panel_gamePlay.add(domLabel);
                panel_gamePlay.setComponentZOrder(domLabel, 0);
            }
            panel_gamePlay.repaint();
        }
        
        //remove draw button and enable dominos in panel_dominoTrack
        panel_dominoTrack.remove(panel_dominoTrack.getComponent(0));
        for (Component c : panel_dominoTrack.getComponents()) {
            c.setEnabled(true);
        }
        
        panel_dominoTrack.repaint();
        
//        while (!boneyard.isEmpty() && draw(playerList.get(turnIndex))) {
//            //move domino from boneyard to player hand
//            //Domino drawDom = boneyard.pop();
//            playerList.get(turnIndex).add(drawDom);
//            
//        }
    }
    
    private void endRound() {
        //get the winner of the round
        Player winner = playerList.get(turnIndex);
        for (Player p : playerList) {
            if (p.getHand().isEmpty())
                winner = p;
        }
        
        //update score
        int winnerScore = 0;
        for (Player p : playerList) {
            if (team) {
                if (!p.getTeam().equals(winner.getTeam()))
                    winnerScore += p.getHandTotal();
            } else if (!p.equals(winner))
                winnerScore += p.getHandTotal();
        }
        
        //update instruction label
        if (team){
            label_instructionLabel.setText("Player " + (playerList.indexOf(winner) + 1) + " from team " + winner.getTeam() + " WON " + winnerScore + " points");
            for (Player p : playerList) {
                if (p.getTeam().equals(winner.getTeam()))
                    p.setScore(p.getScore() + winnerScore);
            }
        } else {
            label_instructionLabel.setText("Player " + (playerList.indexOf(winner) + 1) + " WON " + winnerScore + " points");
            winner.setScore(winner.getScore() + winnerScore);
        }
        
        
        updateScoreTable();
        
        //start next round
        startNextRound();
        
    }
    
    private void startNextRound() {
        System.out.println("START NEXT ROUND");
        if (!isGameOver()) {
            //update instruction label
            label_instructionLabel.setText(label_instructionLabel.getText() + " and will start the next round. Please select the domino you would like to play");
            
            //clear dominoTrack panel
            for (Component c : panel_dominoTrack.getComponents())
                panel_dominoTrack.remove(c);
            
            //clear track
            track.clear();
            
            //get the player who won the round
            Player winner = null;
            for (Player p : playerList) {
                if (p.getHand().isEmpty())
                    winner = p;
            }
            
            //get winner if no one can play
            if (winner == null) {
                winner = playerList.get(0);
                for (Player p : playerList) {
                    if (p.getHandTotal() < winner.getHandTotal())
                        winner = p;
                }
            }
            
            //set turn index 
            turnIndex = playerList.indexOf(winner);
            
            //clear boneyard
            boneyard.clear();
            
            ///add dominoes to boneyard////
            ArrayList<Domino> list = new ArrayList();
            for (int i = 0; i < 7; i++) {
                for (int j = i; j < 7; j++) {
                    String name = i + ":" + j;
                    list.add(new Domino(name));
                }
            }
            Collections.shuffle(list);

            for (Domino domino : list)
                boneyard.add(domino);
            
            //clear all hands and make new ones
            for (Player p : playerList) {
                p.clearHand();
                for (int i = 0; i < 7 - (playerList.size() - 2); i++)
                    p.add(boneyard.pop());
            }

            label_player.setText("Player " + (turnIndex + 1) + ": ");
        
            if (!playerList.get(turnIndex).isComputer()) {
                MouseListener dominoClicked = new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        firstDominoSelected(e);
                        inverseDominoColor(e);

                    }

                    @Override
                    public void mousePressed(MouseEvent e) {}

                    @Override
                    public void mouseReleased(MouseEvent e) {}

                    @Override
                    public void mouseEntered(MouseEvent e) {}

                    @Override
                    public void mouseExited(MouseEvent e) {}
                };

                //display hand
                Player player1 = playerList.get(turnIndex);
                int x = label_player.getX() + label_player.getWidth() + 20;
                int y = label_player.getY() - 30;
                for (Domino domino : (ArrayList<Domino>) player1.getHand()) {
                    String name = domino.getSideOneValue() + ":" + domino.getSideTwoValue();
                    JLabel dominoLabel = new JLabel();
                    dominoLabel.setName(name);
                    dominoLabel.setBounds(x, y, 100, 200);
                    dominoLabel.setIcon(resizeImageIcon(domino.getImageIcon(name, "vertical"), dominoLabel));
                    dominoLabel.addMouseListener(dominoClicked);
                    panel_gamePlay.add(dominoLabel);
                    panel_gamePlay.setComponentZOrder(dominoLabel, 0);
                    x += 110;
                }

                panel_gamePlay.repaint();
            } else {
                startComputerTurn();
            }
            
        } else {
            endGame();
        }
    }
    
    private void endGame() {
        System.out.println("END GAME");
        
        //Clear Panel
        for (Component c : panel_gamePlay.getComponents()) {
            if (c.getName() != null)
                panel_gamePlay.remove(c);
        }
        
        for (Component c : panel_dominoTrack.getComponents()) {
            panel_dominoTrack.remove(c);
        }
        
        String str = "";
        
        if (team) {
            int winningTeam = 0;
            
            //find team that won
            for (Player p :  playerList) {
                if (p.getScore() > 99)
                    winningTeam = p.getTeam();
            }
            
            str = "Team " + winningTeam + " WON THE GAME!!";
        } else {
            //find player that won
            int winningPlayer = 0;
            
            for (Player p : playerList) {
                if (p.getScore() > 99)
                    winningPlayer = playerList.indexOf(p) + 1;
            }
            
            str = "Player " + winningPlayer + " WON THE GAME!!";
        }
        
        //set instruction label text
        label_instructionLabel.setText(str + " Close window to go back to main menu");
        
        //Create display label
        JLabel displayLabel = new JLabel(str);
        Font drawDomF = label_drawDominoes.getFont();
        Font f = new Font(drawDomF.getName(), drawDomF.getStyle(), drawDomF.getSize() + 20);
        displayLabel.setFont(f);
        displayLabel.setBounds((panel_dominoTrack.getWidth() / 2) - 400, (panel_dominoTrack.getHeight() / 2) - 100, 800, 200);
        
        panel_dominoTrack.add(displayLabel);
        panel_dominoTrack.repaint();
        
        //fix main menu
        for (Component c : panel_mainMenu.getComponents()) {
            c.setEnabled(true);
        } 
    }
    
    private void displayDryBoneyard() {
        //disable all dominoes in track
        for (Component c : panel_dominoTrack.getComponents()) {
            c.setEnabled(false);
        }
        
        //create dry boneyard label
        JLabel label = new JLabel("Boneyard is dry");
        label.setFont(label_drawDominoes.getFont());
        label.setBounds((panel_dominoTrack.getWidth() / 2) - 200, (panel_dominoTrack.getHeight() / 2) - 30, 400, 60);
        
        panel_dominoTrack.add(label);
        panel_dominoTrack.setComponentZOrder(label, 0);
        panel_dominoTrack.repaint();
        
    }
    
    private ArrayList<JLabel> getSelectionBoxes(Domino d) {
        ArrayList<JLabel> result = new ArrayList();
        if (!track.getTrack().isEmpty()) {
            if (canPlay(d)) {
                ArrayList<Domino> openDoms = track.getOpenDominoes();
                ArrayList<Domino> playableDoms = new ArrayList();

                //instantiate playable side map
                TreeMap<String, ArrayList<String>> openSideMap = new TreeMap();
                //load map
                for (Domino dom : openDoms) {
                    //check to see if the open domino is a double
                    if (dom.getSideOneValue().equals(dom.getSideTwoValue())) {
                        if (dom.getSideOneValue().equals(selectedDom.getSideOneValue()) || dom.getSideOneValue().equals(selectedDom.getSideTwoValue()))
                            playableDoms.add(dom);
                    } else {

                        JLabel dLabel = new JLabel();
                        //get domino label in track
                        for (Component c : panel_dominoTrack.getComponents()) {
                            if (c.getName().contains(dom.toString()))
                                dLabel = (JLabel)c;
                        }

                        //check horizontal, then check to see if the open side can be played
                        Integer openSideVal = null;
                        if (dLabel.getWidth() > dLabel.getHeight()) {
                            //get the open side value for horizontal
                            if (dom.getOpenSides().contains("left"))
                                openSideVal = dom.getSideOneValue();
                            else
                                openSideVal = dom.getSideTwoValue();

                        } else {
                            //get the open side value for vertical
                            if (dom.getOpenSides().contains("up"))
                                openSideVal = dom.getSideOneValue();
                            else
                                openSideVal = dom.getSideTwoValue();
                        }

                        //check against selectedDomino sides
                        if (openSideVal.equals(selectedDom.getSideOneValue()) || openSideVal.equals(selectedDom.getSideTwoValue()))
                            playableDoms.add(dom);  
                    }
                }

               //Load open side map with open sides
                Set s = track.getTrack().keySet();
                Object[] arr = s.toArray();
                Integer trackDomS1 = ((Domino)arr[0]).getSideOneValue();
                Integer trackDomS2 = ((Domino)arr[0]).getSideTwoValue();
                Integer selectDomS1 = selectedDom.getSideOneValue();
                Integer selectDomS2 = selectedDom.getSideTwoValue();
                if (track.getTrack().size() == 1 && !trackDomS1.equals(trackDomS2)) {
//                  System.out.println(trackDomS2 + " == " + selectDomS1 + " :: " + trackDomS2.equals(selectDomS1));
//                  System.out.println(trackDomS2 + " == " + selectDomS2 + " :: " + trackDomS2.equals(selectDomS2));
                    ArrayList<String> list = new ArrayList();
                    if (trackDomS1.equals(selectDomS1) || trackDomS1.equals(selectDomS2)) {
                        list.add("left");
                        openSideMap.put(((Domino)arr[0]).toString(), list);
                    } else if (trackDomS2.equals(selectDomS1) || trackDomS2.equals(selectDomS2)) {
                        list.add("right");
                        openSideMap.put(((Domino)arr[0]).toString(), list);
                    }
                } else {
                    for (Domino dom : playableDoms) {
                        openSideMap.put(dom.toString(), dom.getOpenSides());
                    }
                }
                
                //draw green labels on panel_dominoTrack
                Set keys = openSideMap.keySet();
                Iterator<String> iterator = keys.iterator();
                while (iterator.hasNext()) {
                    String key = iterator.next();
                    String s1 = key.substring(0, 1);
                    String s2 = key.substring(key.length() - 1);

                    //get label for key dom
                    JLabel trackLabel = new JLabel();
                    for (int i = 0; i < panel_dominoTrack.getComponentCount(); i++) {
                        if (panel_dominoTrack.getComponent(i).getName().contains(key)) {
                            trackLabel = (JLabel)panel_dominoTrack.getComponent(i);
                        }
                    }

                    for (String str : openSideMap.get(key)) {
                        JLabel label = new JLabel();
                        label.setName(str + "-" + key + " Selection Box");
                        label.setOpaque(true);
                        if (str.equals("up")) {
                            //set bounds for vertical or horizontal
                            if (trackLabel.getWidth() < trackLabel.getHeight())
                                label.setBounds(trackLabel.getX(), trackLabel.getY() - trackLabel.getHeight(), trackLabel.getWidth(), trackLabel.getHeight());
                            else
                                label.setBounds(trackLabel.getX() + (trackLabel.getWidth() / 4), trackLabel.getY() - trackLabel.getWidth(), trackLabel.getHeight(), trackLabel.getWidth());
                        } else if (str.equals("down")) {
                            //set bounds for vertical or horizontal
                            if (trackLabel.getWidth() < trackLabel.getHeight())
                                label.setBounds(trackLabel.getX(), trackLabel.getY() + trackLabel.getHeight(), trackLabel.getWidth(), trackLabel.getHeight());
                            else
                                label.setBounds(trackLabel.getX() + (trackLabel.getWidth() / 4), trackLabel.getY() + trackLabel.getHeight(), trackLabel.getHeight(), trackLabel.getWidth());
                            trackLabel.setBackground(Color.green);
                        } else if (str.equals("left")) {
                            //set bounds for vertical or horizontal
                            if (trackLabel.getWidth() < trackLabel.getHeight())
                                label.setBounds(trackLabel.getX() - trackLabel.getHeight(), trackLabel.getY() + (trackLabel.getHeight() / 4), trackLabel.getHeight(), trackLabel.getWidth());
                            else
                                label.setBounds(trackLabel.getX() - trackLabel.getWidth(), trackLabel.getY(), trackLabel.getWidth(), trackLabel.getHeight());
                        } else if (str.equals("right")) {
                            //set bounds for vertical or horizontal
                            if (trackLabel.getWidth() < trackLabel.getHeight())
                                label.setBounds(trackLabel.getX() + trackLabel.getWidth(), trackLabel.getY() + (trackLabel.getHeight() / 4), trackLabel.getHeight(), trackLabel.getWidth());
                            else
                                label.setBounds(trackLabel.getX() + trackLabel.getWidth(), trackLabel.getY(), trackLabel.getWidth(), trackLabel.getHeight());
                        }
                        label.setBackground(Color.green);

                        result.add(label);
                    }
                }
            } else {
                System.out.println("ERROR :: Cannot play domino " + d);
            }
        } else {
            //create center label
            JLabel centerLabel = new JLabel();
            centerLabel.setOpaque(true);
            centerLabel.setName(selectedDom.toString() + " - root");
            centerLabel.setBounds((panel_dominoTrack.getWidth() / 2) - 100, (panel_dominoTrack.getHeight() / 2) - 50, 200, 100);
            result.add(centerLabel);
        }
        return result;
    }
    
    private boolean isGameOver() {
        for (Player p : playerList) {
            if (p.getScore() > 99)
                return true;
        }
        return false;
    }
    
    private boolean isRoundOver() {
        int outCount = 0;
        for (Player p : playerList) {
            if (p.isOut())
                outCount++;
            if (p.getHand().isEmpty())
                return true;
        }
        System.out.println("outCount == " + outCount);
        System.out.println("outCount == playerList.size() == " + (outCount == playerList.size()));
        if (outCount == playerList.size())
            return true;
        return false;
    }
    
    private boolean canPlay(Domino d) {
        if (!track.getTrack().isEmpty()) {
            ArrayList<Domino> openDoms = track.getOpenDominoes();

//            System.out.println("Open doms ::");
//            for (Domino domino : openDoms) {
//                System.out.println(domino.toString());
//            }
//            System.out.println();
            
            //check to see if track has one domino
            if (track.getTrack().size() == 1) {
                Domino trackDom = openDoms.get(0);
                if (d.getSideOneValue().equals(trackDom.getSideOneValue()) || d.getSideOneValue().equals(trackDom.getSideTwoValue()))
                    return true;
                if (d.getSideTwoValue().equals(trackDom.getSideOneValue()) || d.getSideTwoValue().equals(trackDom.getSideTwoValue()))
                    return true;
            } else {
            
                for (Domino dom : openDoms) {
                    if (dom.getSideOneValue().equals(dom.getSideTwoValue())) {
                        if (dom.getSideOneValue().equals(d.getSideOneValue()) || dom.getSideOneValue().equals(d.getSideTwoValue()))
                            return true;
                    } else {
                        JLabel dLabel = new JLabel();
                        //get domino label in track
                        for (Component c : panel_dominoTrack.getComponents()) {
                            if (c.getName().contains(dom.toString())) {
                                dLabel = (JLabel)c;
                            }
                        }

                        //check horizontal, then check to see if the open side can be played

                        //System.out.println("Domino Label :: " + dLabel.getName());

                        Integer openSideVal = null;
                        if (dLabel.getWidth() > dLabel.getHeight()) {
                            //get the open side value for horizontal
                            if (dom.getOpenSides().contains("left"))
                                openSideVal = dom.getSideOneValue();
                            else
                                openSideVal = dom.getSideTwoValue();

                        } else {
                            //get the open side value for vertical
                            if (dom.getOpenSides().contains("up"))
                                openSideVal = dom.getSideOneValue();
                            else
                                openSideVal = dom.getSideTwoValue();
                        }

    //                    System.out.println(dom.toString() + " Open side val = " + openSideVal);
    //
    //                    //check against selectedDomino sides
//                        System.out.println(openSideVal + " == " + d.getSideOneValue() + " :: " + (openSideVal.equals(d.getSideOneValue())));
//                        System.out.println(openSideVal + " == " + d.getSideTwoValue() + " :: " + (openSideVal.equals(d.getSideTwoValue())));
                        if (openSideVal.equals(d.getSideOneValue()) || openSideVal.equals(d.getSideTwoValue()))
                           return true; 
                    }
                }
            }

        } else {
            return true;
        }
        return false;
    }
    
    private boolean checkTeamBox(JPanel panel) {
        int[] list = new int[4];
        int i = 0;
        for (Component c : panel.getComponents()) {
            if (c.getName() != null && c.getName().equals("comboBox")) {
                JComboBox comboBox_team = (JComboBox)c;
                list[i] = comboBox_team.getSelectedIndex();
                i++;
                if (comboBox_team.getSelectedIndex() == 0)
                    return false;
            }
        }
        
        //check if the teams are different
        if (list[0] == list[1] && list[1] == list[2] && list[2] == list[3])
            return false;
        
        return true;
    }
}